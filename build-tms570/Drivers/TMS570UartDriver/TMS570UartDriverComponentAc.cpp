// ======================================================================
// \title  TMS570UartDriverComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TMS570UartDriver component base class
// ======================================================================

#include "Drivers/TMS570UartDriver/TMS570UartDriverComponentAc.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif

namespace Drivers {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port cmdIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdIn_InputPorts());
      port++
    ) {
      this->m_cmdIn_InputPort[port].init();
      this->m_cmdIn_InputPort[port].addCallComp(
        this,
        m_p_cmdIn_in
      );
      this->m_cmdIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdIn_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port send
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_send_InputPorts());
      port++
    ) {
      this->m_send_InputPort[port].init();
      this->m_send_InputPort[port].addCallComp(
        this,
        m_p_send_in
      );
      this->m_send_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_send_InputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_send_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdRegOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdRegOut_OutputPorts());
      port++
    ) {
      this->m_cmdRegOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdRegOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdResponseOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdResponseOut_OutputPorts());
      port++
    ) {
      this->m_cmdResponseOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdResponseOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port eventOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_eventOut_OutputPorts());
      port++
    ) {
      this->m_eventOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_eventOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_eventOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port prmGetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_prmGetOut_OutputPorts());
      port++
    ) {
      this->m_prmGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_prmGetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_prmGetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port prmSetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_prmSetOut_OutputPorts());
      port++
    ) {
      this->m_prmSetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_prmSetOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_prmSetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port textEventOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_textEventOut_OutputPorts());
      port++
    ) {
      this->m_textEventOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_textEventOut_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_textEventOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port timeCaller
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeCaller_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port allocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_allocate_OutputPorts());
      port++
    ) {
      this->m_allocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_allocate_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_allocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port deallocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_deallocate_OutputPorts());
      port++
    ) {
      this->m_deallocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_deallocate_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_deallocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port ready
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_ready_OutputPorts());
      port++
    ) {
      this->m_ready_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_ready_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_ready_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port recv
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_recv_OutputPorts());
      port++
    ) {
      this->m_recv_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_recv_OutputPort[%" PRI_PlatformIntType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_recv_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* TMS570UartDriverComponentBase ::
    get_cmdIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdIn_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_cmdIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Drv::InputByteStreamSendPort* TMS570UartDriverComponentBase ::
    get_send_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_send_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_send_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    set_cmdRegOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_eventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_eventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_eventOut_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_prmGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmGetOut_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_prmSetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void TMS570UartDriverComponentBase ::
    set_textEventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_textEventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_textEventOut_OutputPort[portNum].addCallPort(port);
  }

#endif

  void TMS570UartDriverComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    set_allocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferGetPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_allocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_allocate_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_deallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_deallocate_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_ready_OutputPort(
        FwIndexType portNum,
        Drv::InputByteStreamReadyPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ready_OutputPort[portNum].addCallPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_recv_OutputPort(
        FwIndexType portNum,
        Drv::InputByteStreamRecvPort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_recv_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    set_cmdRegOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].registerSerialPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].registerSerialPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_eventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_eventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_eventOut_OutputPort[portNum].registerSerialPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_prmSetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void TMS570UartDriverComponentBase ::
    set_textEventOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_textEventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_textEventOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void TMS570UartDriverComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    set_deallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_deallocate_OutputPort[portNum].registerSerialPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_ready_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ready_OutputPort[portNum].registerSerialPort(port);
  }

  void TMS570UartDriverComponentBase ::
    set_recv_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_recv_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  TMS570UartDriverComponentBase ::
    TMS570UartDriverComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  TMS570UartDriverComponentBase ::
    ~TMS570UartDriverComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_cmdIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_send_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_send_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_cmdRegOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdRegOut_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_cmdResponseOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdResponseOut_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_eventOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_eventOut_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_prmGetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_prmGetOut_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_prmSetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_prmSetOut_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_textEventOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_textEventOut_OutputPort));
  }

#endif

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_timeCaller_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_allocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_allocate_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_deallocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_deallocate_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_ready_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_ready_OutputPort));
  }

  FwIndexType TMS570UartDriverComponentBase ::
    getNum_recv_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_recv_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool TMS570UartDriverComponentBase ::
    isConnected_cmdRegOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdRegOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdRegOut_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_cmdResponseOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_cmdResponseOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdResponseOut_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_eventOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_eventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_eventOut_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_prmGetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmGetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmGetOut_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_prmSetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_prmSetOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmSetOut_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool TMS570UartDriverComponentBase ::
    isConnected_textEventOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_textEventOut_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_textEventOut_OutputPort[portNum].isConnected();
  }

#endif

  bool TMS570UartDriverComponentBase ::
    isConnected_timeCaller_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_timeCaller_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool TMS570UartDriverComponentBase ::
    isConnected_allocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_allocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_allocate_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_deallocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_deallocate_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_ready_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_ready_OutputPort[portNum].isConnected();
  }

  bool TMS570UartDriverComponentBase ::
    isConnected_recv_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_recv_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  Drv::SendStatus TMS570UartDriverComponentBase ::
    send_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& sendBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      portNum < this->getNum_send_InputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );

    Drv::SendStatus retVal;

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    retVal = this->send_handler(
      portNum,
      sendBuffer
    );

    // Unlock guard mutex
    this->unLock();

    return retVal;
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  Fw::Buffer TMS570UartDriverComponentBase ::
    allocate_out(
        FwIndexType portNum,
        U32 size
    )
  {
    FW_ASSERT(
      portNum < this->getNum_allocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_allocate_OutputPort[portNum].invoke(
      size
    );
  }

  void TMS570UartDriverComponentBase ::
    deallocate_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      portNum < this->getNum_deallocate_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_deallocate_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void TMS570UartDriverComponentBase ::
    ready_out(FwIndexType portNum)
  {
    FW_ASSERT(
      portNum < this->getNum_ready_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_ready_OutputPort[portNum].invoke();
  }

  void TMS570UartDriverComponentBase ::
    recv_out(
        FwIndexType portNum,
        Fw::Buffer& recvBuffer,
        const Drv::RecvStatus& recvStatus
    )
  {
    FW_ASSERT(
      portNum < this->getNum_recv_OutputPorts(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_recv_OutputPort[portNum].invoke(
      recvBuffer,
      recvStatus
    );
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time TMS570UartDriverComponentBase ::
    getTime()
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void TMS570UartDriverComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void TMS570UartDriverComponentBase ::
    m_p_cmdIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  Drv::SendStatus TMS570UartDriverComponentBase ::
    m_p_send_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& sendBuffer
    )
  {
    FW_ASSERT(callComp);
    TMS570UartDriverComponentBase* compPtr = static_cast<TMS570UartDriverComponentBase*>(callComp);
    return compPtr->send_handlerBase(
      portNum,
      sendBuffer
    );
  }

}
